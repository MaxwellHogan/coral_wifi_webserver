// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cstdio>

#include "libs/base/led.h"
#include "libs/base/tasks.h"
#include "third_party/freertos_kernel/include/FreeRTOS.h"
#include "third_party/freertos_kernel/include/task.h"

#include "libs/base/mutex.h"
#include "libs/base/network.h"
#include "libs/base/wifi.h"

#include "libs/base/http_server.h"
#include "libs/base/strings.h"
#include "libs/base/utils.h"


namespace coralmicro {

HttpServer::Content UriHandler(const char* path) {
  printf("Request received for %s\r\n", path);
  std::vector<uint8_t> html;
  html.reserve(64);
  if (std::strcmp(path, "/hello.html") == 0) {
    printf("Hello World!\r\n");
    StrAppend(&html, "<html><body>Hello World!</body></html>");
    return html;
  }
  return {};
}

// [[noreturn]] void setupWebServer(){
  
// }

[[noreturn]] void Main() {
  // Turn on Status LED to show the board is on.
  LedSet(Led::kStatus, true);

  printf("Attempting to use Wi-Fi...\r\n");
  // Uncomment me to use the external antenna.
  // SetWiFiAntenna(WiFiAntenna::kExternal);
  bool success = WiFiTurnOn(/*default_iface=*/true);
  if (!success) {
    printf("Failed to turn on Wi-Fi\r\n");
    vTaskSuspend(nullptr);
  }
  success = WiFiConnect("TP-Link_928C", "16553729");
  if (!success) {
    printf("Failed to connect to Wi-Fi\r\n");
    vTaskSuspend(nullptr);
  }
  printf("Wi-Fi connected\r\n");
  auto our_ip_addr = WiFiGetIp();

  if (our_ip_addr.has_value()) {
    printf("DHCP succeeded, our IP is %s.\r\n", our_ip_addr.value().c_str());
  } else {
    printf("We didn't get an IP via DHCP, not progressing further.\r\n");
    vTaskSuspend(nullptr);
  }

  printf("Starting server...\r\n");
  HttpServer http_server;
  http_server.AddUriHandler(UriHandler);
  UseHttpServer(&http_server);
  vTaskSuspend(nullptr);

}
}  // namespace coralmicro

extern "C" [[noreturn]] void app_main(void* param) {
  (void)param;
  coralmicro::Main();
}


// [[noreturn]] void blink_task(void* param) {
//   auto led_type = static_cast<coralmicro::Led*>(param);
//   bool on = true;
//   while (true) {
//     on = !on;
//     coralmicro::LedSet(*led_type, on);
//     printf("Hello out-of-tree world!\r\n");
//     vTaskDelay(pdMS_TO_TICKS(500));
//   }
// }

// extern "C" void app_main(void* param) {
//   (void)param;
//   auto user_led = coralmicro::Led::kUser;
//   xTaskCreate(&blink_task, "blink_user_led_task", configMINIMAL_STACK_SIZE,
//               &user_led, coralmicro::kAppTaskPriority, nullptr);
//   vTaskSuspend(nullptr);
// }